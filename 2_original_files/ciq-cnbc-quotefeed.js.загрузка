// chart library (stx.js) needs to be included before this
var wentBack;

STX.QuoteFeed.CNBC = function (url, quoteURL) {
	this.url = url;
	this.quoteURL = quoteURL;
	var self = this;
	var fetchCallback;
	var waiting = false;
	var _params = null;
	var modifiedParams;
	var _update;

	this.makeURL = function (symbol, period, startDate, endDate) {
		var seconds = endDate.getSeconds();
		if (seconds < 10) seconds = '0' + seconds;
		var feedURL;
		if (period == '1D') {
			var timeDiff = (new Date(endDate)).getTime() - (new Date(startDate)).getTime();
			timeDiff = Math.ceil(timeDiff/86400000);
			var m=endDate.getMonth()+1;
			if(m<10) m="0" + m;
			var d=endDate.getDate();
			if(d<10) d="0" + d;

			feedURL = self.url + 'lastclose/lnt/EOD/' + encodeURIComponent(symbol) + "/1D/" + endDate.getFullYear() + m + d + "/" + timeDiff + "/EST5EDT.json"; 
		} else {
			feedURL = self.url + "bars/" + symbol + "/" + period + "/" +
				STX.yyyymmddhhmm(startDate) + "00/" + STX.yyyymmddhhmm(endDate) + seconds + "/adjusted/EST5EDT.json";
		}
		return feedURL;
	};

	this.makeQuoteURL = function (symbol) {
		return self.quoteURL + "quote.htm?symbols=" + encodeURIComponent(symbol) + "&requestMethod=quick&exthrs=1&noform=1&fund=1&events=1&output=json&partnerId=2";
	};

	this.processLatestQuote = function (status, response) {
		if (status == 200) {
			response = JSON.parse(response);
			var quote = response.QuickQuoteResult.QuickQuote;
			if (quote.curmktstatus == "PRE_MKT" || quote.curmktstatus == "POST_MKT") {
				quote = quote.ExtendedMktQuote;
			}
			var currentQuoteTime = parseInt(quote.last_time_msec);

			//If we are on the next day, create a new bar
			/*var masterData = stxx.chart.masterData;
			var lastBar = masterData[masterData.length - 1];
			var lastBarTime = lastBar.DT.getTime();

			var currentDT = new Date(currentQuoteTime);
			var newQuotes = EODData[stxx.chart.symbol];

			displayZoneCurrentDT = STX.convertTimeZone(currentDT, null, stxx.displayZone);
			displayLastBarDT = STX.convertTimeZone(lastBar.DT, null, stxx.displayZone);*/

			var newQuotes = stxx.EODData[stxx.chart.symbol];
			
			if (!stxx.lastTrade) stxx.lastTrade = {};
			if (!stxx.lastTradeTime) stxx.lastTradeTime = {};
			//stxx.streamTrade({'last': stxx.lastTrade[stxx.chart.symbol] ? stxx.lastTrade[stxx.chart.symbol] : parseFloat(quote.last)}, currentQuoteTime);
			
			newQuotes.push({
				DT: stxx.lastTradeTime[stxx.chart.symbol] ? new Date(parseInt(stxx.lastTradeTime[stxx.chart.symbol])) : new Date(currentQuoteTime),
				Close: stxx.lastTrade[stxx.chart.symbol] ? stxx.lastTrade[stxx.chart.symbol] : parseFloat(quote.last),
				Adj_Close: stxx.lastTrade[stxx.chart.symbol] ? stxx.lastTrade[stxx.chart.symbol] : parseFloat(quote.last)
			})
			
			self.fetchCallback({
				quotes: newQuotes
			});



		}
	};

	this.masterDataToTimeMap = function(masterData) {
		var map = {};
		if (masterData) {
			for (var i=0; i<masterData.length; i++) {
				map[masterData[i].DT.getTime()] = masterData[i];
			}
		}
		return map;
	}

	this.processResponse = function (status, response) {
		if (status != 200) {
			self.fetchCallback({
				error: status
			}); // something went wrong, use the callback function to return your error
			return;
		}
		response = JSON.parse(response);
		var streamTrade = false;

		if (response.requestDetails.symbol != stxx.chart.symbol) {
			//console.log ('fast finger symbol mismatch');
			modifiedParams.symbol = stxx.chart.symbol;
			modifiedParams.fastChartChange = true;
			self.fetch(modifiedParams, self.fetchCallback);
			return;
		}

		if (response.lastBarData) {
			response.barData = {};
			response.barData.barcount = response.lastBarData.last_bars.length;
			response.barData.priceBars = response.lastBarData.last_bars;
		}

		if (!response.barData.barcount && wentBack < 5 && modifiedParams) { //go back a few days if nothing found to deal with weekends, holidays etc.
			modifiedParams.startDate.setDate(modifiedParams.startDate.getDate() - 1);
			var feedURL = self.makeURL(modifiedParams.symbol, modifiedParams.period, modifiedParams.startDate, modifiedParams.endDate);
			STX.postAjax(feedURL, null, self.processResponse);
			wentBack++;
		} else {

			var newQuotes = [];
			var masterData = stxx.chart.masterData;
			//var masterDataByTime = self.masterDataToTimeMap(masterData);
			var gotClosingBar = {};
			//var onebartoday = false;
			for (var i = 0; i < response.barData.priceBars.length; i++) {
				var currentBar = response.barData.priceBars[i];
				var currentBarTime = parseInt(currentBar.tradeTimeinMills);
				if (!currentBarTime) currentBarTime=parseInt(currentBar.tradeTimeMillis);

				var currentBarDate = new Date(currentBarTime);
				var currentBarDisplayDate;

				//ignore items outside of market hours - only works for the specific case of the market defined in cnbc-chart. Not generic
				//also this sometimes causes the last bar to get missed. so the logic of the bars below
				if (stxx.displayZone) {
					currentBarDisplayDate = STX.convertTimeZone(currentBarDate, stxx.dataZone, stxx.displayZone);
				} else {
					currentBarDisplayDate = new Date(currentBarDate);
				}
				var oneDayBars = (currentBarDisplayDate.getHours()==0 && currentBarDisplayDate.getMinutes()==0 && currentBarDisplayDate.getSeconds()==0);
				var marketOpen = stxx.chart.market._was_open(currentBarDisplayDate, true);
				if (!oneDayBars) {
					if (!marketOpen && !gotClosingBar[STX.yyyymmdd(currentBarDate)]) {
						gotClosingBar[STX.yyyymmdd(currentBarDate)]=true;
					} else if (!marketOpen) {
						continue;
					}
				} 

				//ignore all but one bars for today (used only for debugging issues with begining of day problems)
				/*if (currentBarDate.getDate() == (new Date()).getDate()) {
					if (!masterData || !masterData.length) break;
					if (onebartoday) break;
					else onebartoday=true;
				}*/

				var currentQuote = {};
				currentQuote.DT = new Date(currentBarTime);
				currentQuote.Open = parseFloat(currentBar.open);
				currentQuote.High = parseFloat(currentBar.high);
				currentQuote.Low = parseFloat(currentBar.low);
				currentQuote.Close = parseFloat(currentBar.close);
				currentQuote.Volume = parseInt(currentBar.volume);
				currentQuote.Adj_Close = parseFloat(currentBar.close);
				
				var lastMasterDataBarTime;
				var firstMasterDataBarTime;
				if (masterData && masterData.length) {
				 	var lastMasterDataBar = masterData[masterData.length-1];
					lastMasterDataBarTime = lastMasterDataBar.DT.getTime();
					var firstMasterDataBar = masterData[0];
					firstMasterDataBarTime=firstMasterDataBar.DT.getTime();
				}
				if (!stxx.lastTrade) stxx.lastTrade = {};
				if (!stxx.lastTradeTime) stxx.lastTradeTime = {};
				if (modifiedParams.update && masterData && masterData.length) {
				 	if (currentBarTime>=lastMasterDataBarTime) {
				 		if (i<response.barData.priceBars.length-1) {
				 			newQuotes.push(currentQuote);
				 		} else {
				 			if (newQuotes.length) {
				 				newQuotes[newQuotes.length - 1].Close = stxx.lastTrade[stxx.chart.symbol] ? stxx.lastTrade[stxx.chart.symbol] : parseFloat(currentBar.close);
				 				newQuotes[newQuotes.length - 1].Adj_Close = newQuotes[newQuotes.length - 1].Close;
				 				if (newQuotes[newQuotes.length - 1].Close>newQuotes[newQuotes.length - 1].High) newQuotes[newQuotes.length - 1].High = newQuotes[newQuotes.length - 1].Close;
				 				if (newQuotes[newQuotes.length - 1].Close<newQuotes[newQuotes.length - 1].Low) newQuotes[newQuotes.length - 1].Low = newQuotes[newQuotes.length - 1].Close;
				 				
				 			} else {
				 				streamTrade = {
				 					time: currentBarTime,
				 					price: stxx.lastTrade[stxx.chart.symbol] ? stxx.lastTrade[stxx.chart.symbol] : parseFloat(currentBar.close)
				 				}
				 				stxx.streamTrade({'last': streamTrade.price}, streamTrade.time);
				 			}
				 		}
				 	}				 	
				} else {
					if (i<response.barData.priceBars.length-1) {
						if (masterData && masterData.length) {
							if (currentBarTime<firstMasterDataBarTime || currentBarTime>lastMasterDataBarTime) { // avoid duplicated data
								newQuotes.push(currentQuote);
							}
						} else {
							newQuotes.push(currentQuote);
						}
					} else {
						if (!lastMasterDataBarTime || currentBarTime>=lastMasterDataBarTime) {
							if (newQuotes.length>0) {
								newQuotes[newQuotes.length - 1].Close = stxx.lastTrade[stxx.chart.symbol] ? stxx.lastTrade[stxx.chart.symbol] : parseFloat(currentBar.close);
				 				newQuotes[newQuotes.length - 1].Adj_Close = newQuotes[newQuotes.length - 1].Close;
				 				if (newQuotes[newQuotes.length - 1].Close>newQuotes[newQuotes.length - 1].High) newQuotes[newQuotes.length - 1].High = newQuotes[newQuotes.length - 1].Close;
				 				if (newQuotes[newQuotes.length - 1].Close<newQuotes[newQuotes.length - 1].Low) newQuotes[newQuotes.length - 1].Low = newQuotes[newQuotes.length - 1].Close;
				 				
				 			}
				 			streamTrade = {
			 					time: currentBarTime,
			 					price: stxx.lastTrade[stxx.chart.symbol] ? stxx.lastTrade[stxx.chart.symbol] : parseFloat(currentBar.close)
			 				}
			 				stxx.streamTrade({'last': streamTrade.price}, streamTrade.time);
			 			} else if (currentBarTime<firstMasterDataBarTime) {
			 				newQuotes.push(currentQuote);
			 			}
					}
				}
			}

			var moreAvailable = false;
			if (newQuotes.length) {
				moreAvailable = true;
			}

			var callBack = self.fetchCallback({
				quotes: newQuotes,
				moreAvailable: moreAvailable
			});

			if (streamTrade) {
				stxx.streamTrade({'last': streamTrade.price}, streamTrade.time);
			}

			self.waiting = false;

		}
	};

	this.update = function (params, cb) {
		self.fetchCallback = cb;
		var feedURL = self.makeURL(params.symbol, params.period, params.startDate, params.endDate);
		self.waiting = true;
		self._params = params;
		STX.postAjax(feedURL, null, this.processResponse);
	};

	this.fetch = function (params, cb) {
		//var feedURL = this.url + "/" + params.symbol;
		if (params.fastChartChange) {
			var feedURL = this.makeURL(params.symbol, params.period, params.startDate, params.endDate);
			STX.postAjax(feedURL, null, this.processResponse);
			return;
		}


		var msBack = 0;
		self.fetchCallback = cb;
		var isUpdate = true;
		if (!params.startDate) {
			isUpdate = false;
		}
		var isMoreDataCall = false;

		var endDate;
		var startDate;

		if (!params.endDate) {
			endDate = new Date();
			endDate.setDate(endDate.getDate() + 1);
		} else { 
			endDate = new Date(params.endDate);
			isMoreDataCall = true;
		}

		endDate.setHours(0,0,0);

		switch (params.period) {
		case 15:
			params.period = 5;
			params.ticks = params.ticks * 3;
			break;
		}

		var period = '';

		switch (params.interval) {
		case "minute":
			msBack = 60000 * params.period;
			period = params.period + "M";
			if (!params.startDate) {
				startDate = new Date(endDate.getTime() - (params.ticks * msBack * 3)); //8 hour day approx requires
			}
			break;
		case "hour":
			msBack = 3600000 * params.period;
			period = params.period + "H";
			if (!params.startDate) {
				startDate = new Date(endDate.getTime() - (params.ticks * msBack * 3));
			}
			break;
		case "day":
			period = params.period + "D";
			if (!params.startDate) {
				startDate = new Date(endDate.getTime());
				startDate.setDate(startDate.getDate() - (params.ticks));
			}
			// If we have EODData, no need to make more calls??
			if (!isMoreDataCall) {
				var EODData = stxx.EODData[params.symbol];
				if (EODData) {
					newQuotes = EODData;
					
					if (!stxx.lastTrade) stxx.lastTrade = {};
					if (!stxx.chart.symbol) stxx.lastTradeTime = {};
					//stxx.streamTrade({'last': stxx.lastTrade[stxx.chart.symbol] ? stxx.lastTrade[stxx.chart.symbol] : parseFloat(quote.last)}, currentQuoteTime);

					if (stxx.lastTrade[stxx.chart.symbol] && stxx.lastTradeTime[stxx.chart.symbol]) {
						newQuotes.push({
							DT: new Date(parseInt(stxx.lastTradeTime[stxx.chart.symbol])),
							Close: stxx.lastTrade[stxx.chart.symbol],
							Adj_Close: stxx.lastTrade[stxx.chart.symbol]
						})


						self.fetchCallback({
							quotes: newQuotes,
							moreAvailable: true
						});
					} else {
						var quoteOnlyURL = self.makeQuoteURL(params.symbol);
						STX.postAjax(quoteOnlyURL, null, self.processLatestQuote);
					}
					return;

				}
			}
			break;
		}

		params.period = period;

		if (!startDate && !params.startDate) {
			startDate = new Date(endDate);
			startDate.setDate(startDate.getDate() - 1);
		} else if (!startDate) {
			startDate = new Date(params.startDate);
		}

		startDate.setHours(0,0,0);

		// what if we fall on weekend/holidays
		if (!isUpdate) {
			startDate.setDate(startDate.getDate() - 4);
		}
		
		endDate.setDate(endDate.getDate() + 1); //deal with foreign exchanges
        var tomorrowEndOfTheDay = new Date();
        tomorrowEndOfTheDay.setDate(tomorrowEndOfTheDay.getDate() + 1);
        tomorrowEndOfTheDay.setHours(23,59,59);
        if(endDate > tomorrowEndOfTheDay ) {
            endDate = tomorrowEndOfTheDay;
        }

	
		var feedURL = this.makeURL(params.symbol, params.period, startDate, endDate);
		modifiedParams = STX.shallowClone(params);
		modifiedParams.startDate = startDate;
		modifiedParams.endDate = endDate;
		modifiedParams.update = isUpdate;

		wentBack = 0;
		STX.postAjax(feedURL, null, this.processResponse, null, true);
	};

};


STX.QuoteFeed.CNBC.stxInheritsFrom(STX.QuoteFeed);